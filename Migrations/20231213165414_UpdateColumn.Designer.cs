// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using art_tattoo_be.Infrastructure.Database;

#nullable disable

namespace art_tattoo_be.Migrations
{
    [DbContext(typeof(ArtTattooDbContext))]
    [Migration("20231213165414_UpdateColumn")]
    partial class UpdateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppointmentMedia", b =>
                {
                    b.Property<Guid>("AppointmentMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ListMediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("AppointmentMediaId", "ListMediaId");

                    b.HasIndex("ListMediaId");

                    b.ToTable("AppointmentMedia");
                });

            modelBuilder.Entity("MediaStudio", b =>
                {
                    b.Property<Guid>("ListMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudioMediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("ListMediaId", "StudioMediaId");

                    b.HasIndex("StudioMediaId");

                    b.ToTable("MediaStudio");
                });

            modelBuilder.Entity("MediaStudioService", b =>
                {
                    b.Property<Guid>("ListMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudioServiceMediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("ListMediaId", "StudioServiceMediaId");

                    b.HasIndex("StudioServiceMediaId");

                    b.ToTable("MediaStudioService");
                });

            modelBuilder.Entity("MediaUser", b =>
                {
                    b.Property<Guid>("ListMediaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserMediaId")
                        .HasColumnType("char(36)");

                    b.HasKey("ListMediaId", "UserMediaId");

                    b.HasIndex("UserMediaId");

                    b.ToTable("MediaUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionsSlug")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsSlug", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Blog.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StudioId");

                    b.ToTable("blogs", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DoneBy")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DoneBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.ShiftUser", b =>
                {
                    b.Property<Guid>("StuUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("StuUserId", "ShiftId");

                    b.HasIndex("ShiftId");

                    b.ToTable("shift_users", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Category.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tattoo_categories", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Invoice.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Invoice.InvoiceService", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoice_services", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Media.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.HasKey("Id");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.RoleBase.Permission", b =>
                {
                    b.Property<string>("Slug")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Slug");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Slug = "USR.ALL",
                            Name = "Manage users"
                        },
                        new
                        {
                            Slug = "ROLE.ALL",
                            Name = "Manage role"
                        },
                        new
                        {
                            Slug = "PER.ALL",
                            Name = "Manage permission"
                        },
                        new
                        {
                            Slug = "CATE.ALL",
                            Name = "Manage category"
                        },
                        new
                        {
                            Slug = "BLOG.ALL",
                            Name = "Manage blog"
                        },
                        new
                        {
                            Slug = "BLOG.OWN",
                            Name = "Manage owned blog"
                        },
                        new
                        {
                            Slug = "STU.ALL",
                            Name = "Manage studio"
                        },
                        new
                        {
                            Slug = "STU.OWN",
                            Name = "Manage owned studio"
                        },
                        new
                        {
                            Slug = "STU_A.ALL",
                            Name = "Manage studio artists"
                        },
                        new
                        {
                            Slug = "STU_S.ALL",
                            Name = "Manage studio services"
                        },
                        new
                        {
                            Slug = "STU_AS.ALL",
                            Name = "Manage studio artists schedule"
                        },
                        new
                        {
                            Slug = "STU_B.ALL",
                            Name = "Manage studio booking"
                        },
                        new
                        {
                            Slug = "STU_I.ALL",
                            Name = "Manage studio invoice"
                        },
                        new
                        {
                            Slug = "STU_U.R",
                            Name = "Manage studio customers"
                        },
                        new
                        {
                            Slug = "STU_A.R",
                            Name = "View studio artists"
                        },
                        new
                        {
                            Slug = "STU_AS.R",
                            Name = "View studio artists schedule"
                        },
                        new
                        {
                            Slug = "STU_S.R",
                            Name = "View studio services"
                        },
                        new
                        {
                            Slug = "STU_B.R",
                            Name = "View studio booking"
                        },
                        new
                        {
                            Slug = "STU_I.R",
                            Name = "View studio invoice"
                        },
                        new
                        {
                            Slug = "USR_I.R",
                            Name = "View owned invoice"
                        },
                        new
                        {
                            Slug = "TESTI.ALL",
                            Name = "Manage testimonial"
                        },
                        new
                        {
                            Slug = "TESTI.OWN",
                            Name = "Manage owned testimonial"
                        });
                });

            modelBuilder.Entity("art_tattoo_be.Domain.RoleBase.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin",
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "System Staff",
                            Name = "SYSTEM_STAFF"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Studio Manager",
                            Name = "STUDIO_MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Studio Staff",
                            Name = "STUDIO_STAFF"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Studio Artist",
                            Name = "ARTIST"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Member",
                            Name = "MEMBER"
                        });
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Introduction")
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("Logo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<string>("Slogan")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("studios", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<TimeSpan?>("ExpectDuration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("double");

                    b.Property<double>("MinPrice")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StudioId");

                    b.ToTable("studio_services", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("studio_users", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioWorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("CloseAt")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("studio_working_time", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Testimonial.Testimonial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<Guid>("StudioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StudioId");

                    b.HasIndex("UserId");

                    b.ToTable("testimonials", (string)null);
                });

            modelBuilder.Entity("art_tattoo_be.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000012345"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arttattoolover@gmail.com",
                            FullName = "Admin Art Tattoo Lover",
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$11$6Y/GnLIGePPL0jDI8QSlN.iLUkLkWSfgqJXwX1jZFpgfe2YthVLuC",
                            RoleId = 1,
                            Status = "Inactive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000404"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            FullName = "Deleted User",
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "",
                            RoleId = 6,
                            Status = "Inactive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000888"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "guestguest123@guestguest123.com",
                            FullName = "Guest",
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "",
                            RoleId = 6,
                            Status = "Inactive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AppointmentMedia", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Booking.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Media.Media", null)
                        .WithMany()
                        .HasForeignKey("ListMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaStudio", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Media.Media", null)
                        .WithMany()
                        .HasForeignKey("ListMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", null)
                        .WithMany()
                        .HasForeignKey("StudioMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaStudioService", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Media.Media", null)
                        .WithMany()
                        .HasForeignKey("ListMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.StudioService", null)
                        .WithMany()
                        .HasForeignKey("StudioServiceMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaUser", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Media.Media", null)
                        .WithMany()
                        .HasForeignKey("ListMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.RoleBase.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsSlug")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.RoleBase.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Blog.Blog", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.User.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("Blogs")
                        .HasForeignKey("StudioId");

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Appointment", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Studio.StudioUser", "Artist")
                        .WithMany("Appointments")
                        .HasForeignKey("DoneBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("art_tattoo_be.Domain.Studio.StudioService", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("art_tattoo_be.Domain.Booking.Shift", "Shift")
                        .WithMany("Appointments")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Service");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Shift", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("Shifts")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.ShiftUser", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Booking.Shift", "Shift")
                        .WithMany("ShiftUsers")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.StudioUser", "StudioUser")
                        .WithMany("Shifts")
                        .HasForeignKey("StuUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("StudioUser");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Invoice.Invoice", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Booking.Appointment", "Appointment")
                        .WithMany("ListInvoice")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("Invoices")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.User.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Invoice.InvoiceService", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Invoice.Invoice", "Invoice")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.StudioService", "Service")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioService", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Category.Category", "Category")
                        .WithMany("StudioServices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("Services")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioUser", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("StudioUsers")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.User.User", "User")
                        .WithMany("StudioUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioWorkingTime", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("WorkingTimes")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Testimonial.Testimonial", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.Studio.Studio", "Studio")
                        .WithMany("Testimonials")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("art_tattoo_be.Domain.User.User", null)
                        .WithMany("Testimonials")
                        .HasForeignKey("UserId");

                    b.Navigation("Studio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.User.User", b =>
                {
                    b.HasOne("art_tattoo_be.Domain.RoleBase.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Appointment", b =>
                {
                    b.Navigation("ListInvoice");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Booking.Shift", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ShiftUsers");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Category.Category", b =>
                {
                    b.Navigation("StudioServices");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Invoice.Invoice", b =>
                {
                    b.Navigation("InvoiceServices");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.RoleBase.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.Studio", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Invoices");

                    b.Navigation("Services");

                    b.Navigation("Shifts");

                    b.Navigation("StudioUsers");

                    b.Navigation("Testimonials");

                    b.Navigation("WorkingTimes");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioService", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InvoiceServices");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.Studio.StudioUser", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("art_tattoo_be.Domain.User.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Invoices");

                    b.Navigation("StudioUsers");

                    b.Navigation("Testimonials");
                });
#pragma warning restore 612, 618
        }
    }
}
